#pragma once
#include <functional>
#include <queue>
#include <thread>
#include <mutex>
#include <vector>
#include <condition_variable>
#include <atomic>
#include <memory>

template<typename T>
class shared_state {
public:
	std::atomic<bool> isSet, promiseDestroyed;
	mutable std::condition_variable cVar;
	mutable std::mutex fMutex;
	T result;
	bool isException;
	std::exception_ptr exc;
	shared_state();
	void set(const T& r);
	void setError(const std::exception_ptr & ptr);
	void onPromiseDestroyed();
};

template<>
class shared_state<void> {

public:
	std::atomic<bool> isSet, promiseDestroyed;
	mutable std::condition_variable cVar;
	mutable std::mutex fMutex;
	bool result;
	bool isException;
	std::exception_ptr exc;
	shared_state();
	void set();
	void setError(const std::exception_ptr & ptr);
	void onPromiseDestroyed();
};

template<typename T>
class shared_state<T&> {
public:
	std::atomic<bool> isSet, promiseDestroyed;
	mutable std::condition_variable cVar;
	mutable std::mutex fMutex;
	T * result;
	bool isException;
	std::exception_ptr exc;
	shared_state();
	void set(T& r);
	void setError(const std::exception_ptr & ptr);
	void onPromiseDestroyed();
};
